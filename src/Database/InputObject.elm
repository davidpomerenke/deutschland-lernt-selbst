-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Database.InputObject exposing (..)

import Database.Enum.Order_by
import Database.Interface
import Database.Object
import Database.Scalar
import Database.ScalarCodecs
import Database.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildBundesland_comparison_exp :
    (Bundesland_comparison_expOptionalFields -> Bundesland_comparison_expOptionalFields)
    -> Bundesland_comparison_exp
buildBundesland_comparison_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals.eq_, gt_ = optionals.gt_, gte_ = optionals.gte_, in_ = optionals.in_, is_null_ = optionals.is_null_, lt_ = optionals.lt_, lte_ = optionals.lte_, neq_ = optionals.neq_, nin_ = optionals.nin_ }


type alias Bundesland_comparison_expOptionalFields =
    { eq_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , gt_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , gte_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , in_ : OptionalArgument (List Database.ScalarCodecs.Bundesland)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , lte_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , neq_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , nin_ : OptionalArgument (List Database.ScalarCodecs.Bundesland)
    }


{-| Type for the Bundesland\_comparison\_exp input object.
-}
type alias Bundesland_comparison_exp =
    { eq_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , gt_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , gte_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , in_ : OptionalArgument (List Database.ScalarCodecs.Bundesland)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , lte_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , neq_ : OptionalArgument Database.ScalarCodecs.Bundesland
    , nin_ : OptionalArgument (List Database.ScalarCodecs.Bundesland)
    }


{-| Encode a Bundesland\_comparison\_exp into a value that can be used as an argument.
-}
encodeBundesland_comparison_exp : Bundesland_comparison_exp -> Value
encodeBundesland_comparison_exp input =
    Encode.maybeObject
        [ ( "_eq", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.optional input.eq_ ), ( "_gt", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.optional input.gt_ ), ( "_gte", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.optional input.gte_ ), ( "_in", ((Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.list) |> Encode.optional input.in_ ), ( "_is_null", Encode.bool |> Encode.optional input.is_null_ ), ( "_lt", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.optional input.lt_ ), ( "_lte", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.optional input.lte_ ), ( "_neq", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.optional input.neq_ ), ( "_nin", ((Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecBundesland) |> Encode.list) |> Encode.optional input.nin_ ) ]


buildDate_comparison_exp :
    (Date_comparison_expOptionalFields -> Date_comparison_expOptionalFields)
    -> Date_comparison_exp
buildDate_comparison_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals.eq_, gt_ = optionals.gt_, gte_ = optionals.gte_, in_ = optionals.in_, is_null_ = optionals.is_null_, lt_ = optionals.lt_, lte_ = optionals.lte_, neq_ = optionals.neq_, nin_ = optionals.nin_ }


type alias Date_comparison_expOptionalFields =
    { eq_ : OptionalArgument Database.ScalarCodecs.Date
    , gt_ : OptionalArgument Database.ScalarCodecs.Date
    , gte_ : OptionalArgument Database.ScalarCodecs.Date
    , in_ : OptionalArgument (List Database.ScalarCodecs.Date)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Database.ScalarCodecs.Date
    , lte_ : OptionalArgument Database.ScalarCodecs.Date
    , neq_ : OptionalArgument Database.ScalarCodecs.Date
    , nin_ : OptionalArgument (List Database.ScalarCodecs.Date)
    }


{-| Type for the Date\_comparison\_exp input object.
-}
type alias Date_comparison_exp =
    { eq_ : OptionalArgument Database.ScalarCodecs.Date
    , gt_ : OptionalArgument Database.ScalarCodecs.Date
    , gte_ : OptionalArgument Database.ScalarCodecs.Date
    , in_ : OptionalArgument (List Database.ScalarCodecs.Date)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Database.ScalarCodecs.Date
    , lte_ : OptionalArgument Database.ScalarCodecs.Date
    , neq_ : OptionalArgument Database.ScalarCodecs.Date
    , nin_ : OptionalArgument (List Database.ScalarCodecs.Date)
    }


{-| Encode a Date\_comparison\_exp into a value that can be used as an argument.
-}
encodeDate_comparison_exp : Date_comparison_exp -> Value
encodeDate_comparison_exp input =
    Encode.maybeObject
        [ ( "_eq", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.eq_ ), ( "_gt", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.gt_ ), ( "_gte", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.gte_ ), ( "_in", ((Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.list) |> Encode.optional input.in_ ), ( "_is_null", Encode.bool |> Encode.optional input.is_null_ ), ( "_lt", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.lt_ ), ( "_lte", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.lte_ ), ( "_neq", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.neq_ ), ( "_nin", ((Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecDate) |> Encode.list) |> Encode.optional input.nin_ ) ]


buildInt_comparison_exp :
    (Int_comparison_expOptionalFields -> Int_comparison_expOptionalFields)
    -> Int_comparison_exp
buildInt_comparison_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals.eq_, gt_ = optionals.gt_, gte_ = optionals.gte_, in_ = optionals.in_, is_null_ = optionals.is_null_, lt_ = optionals.lt_, lte_ = optionals.lte_, neq_ = optionals.neq_, nin_ = optionals.nin_ }


type alias Int_comparison_expOptionalFields =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Type for the Int\_comparison\_exp input object.
-}
type alias Int_comparison_exp =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Encode a Int\_comparison\_exp into a value that can be used as an argument.
-}
encodeInt_comparison_exp : Int_comparison_exp -> Value
encodeInt_comparison_exp input =
    Encode.maybeObject
        [ ( "_eq", Encode.int |> Encode.optional input.eq_ ), ( "_gt", Encode.int |> Encode.optional input.gt_ ), ( "_gte", Encode.int |> Encode.optional input.gte_ ), ( "_in", (Encode.int |> Encode.list) |> Encode.optional input.in_ ), ( "_is_null", Encode.bool |> Encode.optional input.is_null_ ), ( "_lt", Encode.int |> Encode.optional input.lt_ ), ( "_lte", Encode.int |> Encode.optional input.lte_ ), ( "_neq", Encode.int |> Encode.optional input.neq_ ), ( "_nin", (Encode.int |> Encode.list) |> Encode.optional input.nin_ ) ]


buildLehrplan_bool_exp :
    (Lehrplan_bool_expOptionalFields -> Lehrplan_bool_expOptionalFields)
    -> Lehrplan_bool_exp
buildLehrplan_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, bundesland = Absent, fach = Absent, klassenstufe = Absent, lehrplanid = Absent, schulart = Absent }
    in
    Lehrplan_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, bundesland = optionals.bundesland, fach = optionals.fach, klassenstufe = optionals.klassenstufe, lehrplanid = optionals.lehrplanid, schulart = optionals.schulart }


type alias Lehrplan_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Lehrplan_bool_exp))
    , not_ : OptionalArgument Lehrplan_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplan_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , fach : OptionalArgument String_comparison_exp
    , klassenstufe : OptionalArgument Int_comparison_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Lehrplan_bool_exp` attributes. Note that this type
needs to use the `Lehrplan_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lehrplan_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Lehrplan_bool_exp))
    , not_ : OptionalArgument Lehrplan_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplan_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , fach : OptionalArgument String_comparison_exp
    , klassenstufe : OptionalArgument Int_comparison_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    }


{-| Type for the Lehrplan\_bool\_exp input object.
-}
type Lehrplan_bool_exp
    = Lehrplan_bool_exp Lehrplan_bool_expRaw


{-| Encode a Lehrplan\_bool\_exp into a value that can be used as an argument.
-}
encodeLehrplan_bool_exp : Lehrplan_bool_exp -> Value
encodeLehrplan_bool_exp (Lehrplan_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeLehrplan_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeLehrplan_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeLehrplan_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "bundesland", encodeBundesland_comparison_exp |> Encode.optional input.bundesland ), ( "fach", encodeString_comparison_exp |> Encode.optional input.fach ), ( "klassenstufe", encodeInt_comparison_exp |> Encode.optional input.klassenstufe ), ( "lehrplanid", encodeInt_comparison_exp |> Encode.optional input.lehrplanid ), ( "schulart", encodeString_comparison_exp |> Encode.optional input.schulart ) ]


buildLehrplan_intern_bool_exp :
    (Lehrplan_intern_bool_expOptionalFields -> Lehrplan_intern_bool_expOptionalFields)
    -> Lehrplan_intern_bool_exp
buildLehrplan_intern_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, bundesland = Absent, fach = Absent, klassenstufe = Absent, lehrplandetail = Absent, lehrplanid = Absent, schulart_intern = Absent }
    in
    Lehrplan_intern_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, bundesland = optionals.bundesland, fach = optionals.fach, klassenstufe = optionals.klassenstufe, lehrplandetail = optionals.lehrplandetail, lehrplanid = optionals.lehrplanid, schulart_intern = optionals.schulart_intern }


type alias Lehrplan_intern_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Lehrplan_intern_bool_exp))
    , not_ : OptionalArgument Lehrplan_intern_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplan_intern_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , fach : OptionalArgument String_comparison_exp
    , klassenstufe : OptionalArgument Int_comparison_exp
    , lehrplandetail : OptionalArgument Lehrplandetails_bool_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , schulart_intern : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Lehrplan_intern_bool_exp` attributes. Note that this type
needs to use the `Lehrplan_intern_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lehrplan_intern_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Lehrplan_intern_bool_exp))
    , not_ : OptionalArgument Lehrplan_intern_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplan_intern_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , fach : OptionalArgument String_comparison_exp
    , klassenstufe : OptionalArgument Int_comparison_exp
    , lehrplandetail : OptionalArgument Lehrplandetails_bool_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , schulart_intern : OptionalArgument String_comparison_exp
    }


{-| Type for the Lehrplan\_intern\_bool\_exp input object.
-}
type Lehrplan_intern_bool_exp
    = Lehrplan_intern_bool_exp Lehrplan_intern_bool_expRaw


{-| Encode a Lehrplan\_intern\_bool\_exp into a value that can be used as an argument.
-}
encodeLehrplan_intern_bool_exp : Lehrplan_intern_bool_exp -> Value
encodeLehrplan_intern_bool_exp (Lehrplan_intern_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeLehrplan_intern_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeLehrplan_intern_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeLehrplan_intern_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "bundesland", encodeBundesland_comparison_exp |> Encode.optional input.bundesland ), ( "fach", encodeString_comparison_exp |> Encode.optional input.fach ), ( "klassenstufe", encodeInt_comparison_exp |> Encode.optional input.klassenstufe ), ( "lehrplandetail", encodeLehrplandetails_bool_exp |> Encode.optional input.lehrplandetail ), ( "lehrplanid", encodeInt_comparison_exp |> Encode.optional input.lehrplanid ), ( "schulart_intern", encodeString_comparison_exp |> Encode.optional input.schulart_intern ) ]


buildLehrplan_intern_order_by :
    (Lehrplan_intern_order_byOptionalFields -> Lehrplan_intern_order_byOptionalFields)
    -> Lehrplan_intern_order_by
buildLehrplan_intern_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { bundesland = Absent, fach = Absent, klassenstufe = Absent, lehrplandetail = Absent, lehrplanid = Absent, schulart_intern = Absent }
    in
    Lehrplan_intern_order_by { bundesland = optionals.bundesland, fach = optionals.fach, klassenstufe = optionals.klassenstufe, lehrplandetail = optionals.lehrplandetail, lehrplanid = optionals.lehrplanid, schulart_intern = optionals.schulart_intern }


type alias Lehrplan_intern_order_byOptionalFields =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , fach : OptionalArgument Database.Enum.Order_by.Order_by
    , klassenstufe : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplandetail : OptionalArgument Lehrplandetails_order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart_intern : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type alias for the `Lehrplan_intern_order_by` attributes. Note that this type
needs to use the `Lehrplan_intern_order_by` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lehrplan_intern_order_byRaw =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , fach : OptionalArgument Database.Enum.Order_by.Order_by
    , klassenstufe : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplandetail : OptionalArgument Lehrplandetails_order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart_intern : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Lehrplan\_intern\_order\_by input object.
-}
type Lehrplan_intern_order_by
    = Lehrplan_intern_order_by Lehrplan_intern_order_byRaw


{-| Encode a Lehrplan\_intern\_order\_by into a value that can be used as an argument.
-}
encodeLehrplan_intern_order_by : Lehrplan_intern_order_by -> Value
encodeLehrplan_intern_order_by (Lehrplan_intern_order_by input) =
    Encode.maybeObject
        [ ( "bundesland", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.bundesland ), ( "fach", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.fach ), ( "klassenstufe", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.klassenstufe ), ( "lehrplandetail", encodeLehrplandetails_order_by |> Encode.optional input.lehrplandetail ), ( "lehrplanid", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanid ), ( "schulart_intern", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.schulart_intern ) ]


buildLehrplan_order_by :
    (Lehrplan_order_byOptionalFields -> Lehrplan_order_byOptionalFields)
    -> Lehrplan_order_by
buildLehrplan_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { bundesland = Absent, fach = Absent, klassenstufe = Absent, lehrplanid = Absent, schulart = Absent }
    in
    { bundesland = optionals.bundesland, fach = optionals.fach, klassenstufe = optionals.klassenstufe, lehrplanid = optionals.lehrplanid, schulart = optionals.schulart }


type alias Lehrplan_order_byOptionalFields =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , fach : OptionalArgument Database.Enum.Order_by.Order_by
    , klassenstufe : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Lehrplan\_order\_by input object.
-}
type alias Lehrplan_order_by =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , fach : OptionalArgument Database.Enum.Order_by.Order_by
    , klassenstufe : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Encode a Lehrplan\_order\_by into a value that can be used as an argument.
-}
encodeLehrplan_order_by : Lehrplan_order_by -> Value
encodeLehrplan_order_by input =
    Encode.maybeObject
        [ ( "bundesland", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.bundesland ), ( "fach", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.fach ), ( "klassenstufe", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.klassenstufe ), ( "lehrplanid", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanid ), ( "schulart", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.schulart ) ]


buildLehrplandetails_bool_exp :
    (Lehrplandetails_bool_expOptionalFields -> Lehrplandetails_bool_expOptionalFields)
    -> Lehrplandetails_bool_exp
buildLehrplandetails_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, lehrplan_interns = Absent, lehrplanbeschreibung = Absent, lehrplandetail = Absent, lehrplandetails = Absent, lehrplaneintragsdatum = Absent, lehrplanelternid = Absent, lehrplanhierarchie = Absent, lehrplanid = Absent, lehrplanquelle = Absent, lehrplantitel = Absent, lehrplanzuordnungs = Absent }
    in
    Lehrplandetails_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, lehrplan_interns = optionals.lehrplan_interns, lehrplanbeschreibung = optionals.lehrplanbeschreibung, lehrplandetail = optionals.lehrplandetail, lehrplandetails = optionals.lehrplandetails, lehrplaneintragsdatum = optionals.lehrplaneintragsdatum, lehrplanelternid = optionals.lehrplanelternid, lehrplanhierarchie = optionals.lehrplanhierarchie, lehrplanid = optionals.lehrplanid, lehrplanquelle = optionals.lehrplanquelle, lehrplantitel = optionals.lehrplantitel, lehrplanzuordnungs = optionals.lehrplanzuordnungs }


type alias Lehrplandetails_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Lehrplandetails_bool_exp))
    , not_ : OptionalArgument Lehrplandetails_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplandetails_bool_exp))
    , lehrplan_interns : OptionalArgument Lehrplan_intern_bool_exp
    , lehrplanbeschreibung : OptionalArgument String_comparison_exp
    , lehrplandetail : OptionalArgument Lehrplandetails_bool_exp
    , lehrplandetails : OptionalArgument Lehrplandetails_bool_exp
    , lehrplaneintragsdatum : OptionalArgument Date_comparison_exp
    , lehrplanelternid : OptionalArgument Int_comparison_exp
    , lehrplanhierarchie : OptionalArgument String_comparison_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , lehrplanquelle : OptionalArgument String_comparison_exp
    , lehrplantitel : OptionalArgument String_comparison_exp
    , lehrplanzuordnungs : OptionalArgument Lehrplanzuordnung_bool_exp
    }


{-| Type alias for the `Lehrplandetails_bool_exp` attributes. Note that this type
needs to use the `Lehrplandetails_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lehrplandetails_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Lehrplandetails_bool_exp))
    , not_ : OptionalArgument Lehrplandetails_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplandetails_bool_exp))
    , lehrplan_interns : OptionalArgument Lehrplan_intern_bool_exp
    , lehrplanbeschreibung : OptionalArgument String_comparison_exp
    , lehrplandetail : OptionalArgument Lehrplandetails_bool_exp
    , lehrplandetails : OptionalArgument Lehrplandetails_bool_exp
    , lehrplaneintragsdatum : OptionalArgument Date_comparison_exp
    , lehrplanelternid : OptionalArgument Int_comparison_exp
    , lehrplanhierarchie : OptionalArgument String_comparison_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , lehrplanquelle : OptionalArgument String_comparison_exp
    , lehrplantitel : OptionalArgument String_comparison_exp
    , lehrplanzuordnungs : OptionalArgument Lehrplanzuordnung_bool_exp
    }


{-| Type for the Lehrplandetails\_bool\_exp input object.
-}
type Lehrplandetails_bool_exp
    = Lehrplandetails_bool_exp Lehrplandetails_bool_expRaw


{-| Encode a Lehrplandetails\_bool\_exp into a value that can be used as an argument.
-}
encodeLehrplandetails_bool_exp : Lehrplandetails_bool_exp -> Value
encodeLehrplandetails_bool_exp (Lehrplandetails_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeLehrplandetails_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeLehrplandetails_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeLehrplandetails_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "lehrplan_interns", encodeLehrplan_intern_bool_exp |> Encode.optional input.lehrplan_interns ), ( "lehrplanbeschreibung", encodeString_comparison_exp |> Encode.optional input.lehrplanbeschreibung ), ( "lehrplandetail", encodeLehrplandetails_bool_exp |> Encode.optional input.lehrplandetail ), ( "lehrplandetails", encodeLehrplandetails_bool_exp |> Encode.optional input.lehrplandetails ), ( "lehrplaneintragsdatum", encodeDate_comparison_exp |> Encode.optional input.lehrplaneintragsdatum ), ( "lehrplanelternid", encodeInt_comparison_exp |> Encode.optional input.lehrplanelternid ), ( "lehrplanhierarchie", encodeString_comparison_exp |> Encode.optional input.lehrplanhierarchie ), ( "lehrplanid", encodeInt_comparison_exp |> Encode.optional input.lehrplanid ), ( "lehrplanquelle", encodeString_comparison_exp |> Encode.optional input.lehrplanquelle ), ( "lehrplantitel", encodeString_comparison_exp |> Encode.optional input.lehrplantitel ), ( "lehrplanzuordnungs", encodeLehrplanzuordnung_bool_exp |> Encode.optional input.lehrplanzuordnungs ) ]


buildLehrplandetails_order_by :
    (Lehrplandetails_order_byOptionalFields -> Lehrplandetails_order_byOptionalFields)
    -> Lehrplandetails_order_by
buildLehrplandetails_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { lehrplanbeschreibung = Absent, lehrplandetail = Absent, lehrplaneintragsdatum = Absent, lehrplanelternid = Absent, lehrplanhierarchie = Absent, lehrplanid = Absent, lehrplanquelle = Absent, lehrplantitel = Absent }
    in
    Lehrplandetails_order_by { lehrplanbeschreibung = optionals.lehrplanbeschreibung, lehrplandetail = optionals.lehrplandetail, lehrplaneintragsdatum = optionals.lehrplaneintragsdatum, lehrplanelternid = optionals.lehrplanelternid, lehrplanhierarchie = optionals.lehrplanhierarchie, lehrplanid = optionals.lehrplanid, lehrplanquelle = optionals.lehrplanquelle, lehrplantitel = optionals.lehrplantitel }


type alias Lehrplandetails_order_byOptionalFields =
    { lehrplanbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplandetail : OptionalArgument Lehrplandetails_order_by
    , lehrplaneintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanelternid : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanhierarchie : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanquelle : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplantitel : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type alias for the `Lehrplandetails_order_by` attributes. Note that this type
needs to use the `Lehrplandetails_order_by` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lehrplandetails_order_byRaw =
    { lehrplanbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplandetail : OptionalArgument Lehrplandetails_order_by
    , lehrplaneintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanelternid : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanhierarchie : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanquelle : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplantitel : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Lehrplandetails\_order\_by input object.
-}
type Lehrplandetails_order_by
    = Lehrplandetails_order_by Lehrplandetails_order_byRaw


{-| Encode a Lehrplandetails\_order\_by into a value that can be used as an argument.
-}
encodeLehrplandetails_order_by : Lehrplandetails_order_by -> Value
encodeLehrplandetails_order_by (Lehrplandetails_order_by input) =
    Encode.maybeObject
        [ ( "lehrplanbeschreibung", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanbeschreibung ), ( "lehrplandetail", encodeLehrplandetails_order_by |> Encode.optional input.lehrplandetail ), ( "lehrplaneintragsdatum", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplaneintragsdatum ), ( "lehrplanelternid", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanelternid ), ( "lehrplanhierarchie", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanhierarchie ), ( "lehrplanid", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanid ), ( "lehrplanquelle", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanquelle ), ( "lehrplantitel", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplantitel ) ]


buildLehrplanzuordnung_bool_exp :
    (Lehrplanzuordnung_bool_expOptionalFields -> Lehrplanzuordnung_bool_expOptionalFields)
    -> Lehrplanzuordnung_bool_exp
buildLehrplanzuordnung_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, lehrplandetail = Absent, lehrplanid = Absent, modul = Absent, module_ = Absent }
    in
    Lehrplanzuordnung_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, lehrplandetail = optionals.lehrplandetail, lehrplanid = optionals.lehrplanid, modul = optionals.modul, module_ = optionals.module_ }


type alias Lehrplanzuordnung_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Lehrplanzuordnung_bool_exp))
    , not_ : OptionalArgument Lehrplanzuordnung_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplanzuordnung_bool_exp))
    , lehrplandetail : OptionalArgument Lehrplandetails_bool_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , modul : OptionalArgument String_comparison_exp
    , module_ : OptionalArgument Module_bool_exp
    }


{-| Type alias for the `Lehrplanzuordnung_bool_exp` attributes. Note that this type
needs to use the `Lehrplanzuordnung_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lehrplanzuordnung_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Lehrplanzuordnung_bool_exp))
    , not_ : OptionalArgument Lehrplanzuordnung_bool_exp
    , or_ : OptionalArgument (List (Maybe Lehrplanzuordnung_bool_exp))
    , lehrplandetail : OptionalArgument Lehrplandetails_bool_exp
    , lehrplanid : OptionalArgument Int_comparison_exp
    , modul : OptionalArgument String_comparison_exp
    , module_ : OptionalArgument Module_bool_exp
    }


{-| Type for the Lehrplanzuordnung\_bool\_exp input object.
-}
type Lehrplanzuordnung_bool_exp
    = Lehrplanzuordnung_bool_exp Lehrplanzuordnung_bool_expRaw


{-| Encode a Lehrplanzuordnung\_bool\_exp into a value that can be used as an argument.
-}
encodeLehrplanzuordnung_bool_exp : Lehrplanzuordnung_bool_exp -> Value
encodeLehrplanzuordnung_bool_exp (Lehrplanzuordnung_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeLehrplanzuordnung_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeLehrplanzuordnung_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeLehrplanzuordnung_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "lehrplandetail", encodeLehrplandetails_bool_exp |> Encode.optional input.lehrplandetail ), ( "lehrplanid", encodeInt_comparison_exp |> Encode.optional input.lehrplanid ), ( "modul", encodeString_comparison_exp |> Encode.optional input.modul ), ( "module", encodeModule_bool_exp |> Encode.optional input.module_ ) ]


buildLehrplanzuordnung_order_by :
    (Lehrplanzuordnung_order_byOptionalFields -> Lehrplanzuordnung_order_byOptionalFields)
    -> Lehrplanzuordnung_order_by
buildLehrplanzuordnung_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { lehrplandetail = Absent, lehrplanid = Absent, modul = Absent, module_ = Absent }
    in
    Lehrplanzuordnung_order_by { lehrplandetail = optionals.lehrplandetail, lehrplanid = optionals.lehrplanid, modul = optionals.modul, module_ = optionals.module_ }


type alias Lehrplanzuordnung_order_byOptionalFields =
    { lehrplandetail : OptionalArgument Lehrplandetails_order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , modul : OptionalArgument Database.Enum.Order_by.Order_by
    , module_ : OptionalArgument Module_order_by
    }


{-| Type alias for the `Lehrplanzuordnung_order_by` attributes. Note that this type
needs to use the `Lehrplanzuordnung_order_by` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lehrplanzuordnung_order_byRaw =
    { lehrplandetail : OptionalArgument Lehrplandetails_order_by
    , lehrplanid : OptionalArgument Database.Enum.Order_by.Order_by
    , modul : OptionalArgument Database.Enum.Order_by.Order_by
    , module_ : OptionalArgument Module_order_by
    }


{-| Type for the Lehrplanzuordnung\_order\_by input object.
-}
type Lehrplanzuordnung_order_by
    = Lehrplanzuordnung_order_by Lehrplanzuordnung_order_byRaw


{-| Encode a Lehrplanzuordnung\_order\_by into a value that can be used as an argument.
-}
encodeLehrplanzuordnung_order_by : Lehrplanzuordnung_order_by -> Value
encodeLehrplanzuordnung_order_by (Lehrplanzuordnung_order_by input) =
    Encode.maybeObject
        [ ( "lehrplandetail", encodeLehrplandetails_order_by |> Encode.optional input.lehrplandetail ), ( "lehrplanid", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanid ), ( "modul", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.modul ), ( "module", encodeModule_order_by |> Encode.optional input.module_ ) ]


buildLernplattform_bool_exp :
    (Lernplattform_bool_expOptionalFields -> Lernplattform_bool_expOptionalFields)
    -> Lernplattform_bool_exp
buildLernplattform_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, bundesland = Absent, downvotes = Absent, fach = Absent, klassenstufe = Absent, lehrplanbeschreibung = Absent, lehrplaneintragsdatum = Absent, lehrplanelternid = Absent, lehrplanhierarchie = Absent, lehrplanquelle = Absent, lehrplantitel = Absent, link = Absent, materialart = Absent, materialbeschreibung = Absent, materialeintragsdatum = Absent, materialtestdatum = Absent, materialtitel = Absent, modul = Absent, schulart = Absent, upvotes = Absent }
    in
    Lernplattform_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, bundesland = optionals.bundesland, downvotes = optionals.downvotes, fach = optionals.fach, klassenstufe = optionals.klassenstufe, lehrplanbeschreibung = optionals.lehrplanbeschreibung, lehrplaneintragsdatum = optionals.lehrplaneintragsdatum, lehrplanelternid = optionals.lehrplanelternid, lehrplanhierarchie = optionals.lehrplanhierarchie, lehrplanquelle = optionals.lehrplanquelle, lehrplantitel = optionals.lehrplantitel, link = optionals.link, materialart = optionals.materialart, materialbeschreibung = optionals.materialbeschreibung, materialeintragsdatum = optionals.materialeintragsdatum, materialtestdatum = optionals.materialtestdatum, materialtitel = optionals.materialtitel, modul = optionals.modul, schulart = optionals.schulart, upvotes = optionals.upvotes }


type alias Lernplattform_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Lernplattform_bool_exp))
    , not_ : OptionalArgument Lernplattform_bool_exp
    , or_ : OptionalArgument (List (Maybe Lernplattform_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , downvotes : OptionalArgument Int_comparison_exp
    , fach : OptionalArgument String_comparison_exp
    , klassenstufe : OptionalArgument Int_comparison_exp
    , lehrplanbeschreibung : OptionalArgument String_comparison_exp
    , lehrplaneintragsdatum : OptionalArgument Date_comparison_exp
    , lehrplanelternid : OptionalArgument Int_comparison_exp
    , lehrplanhierarchie : OptionalArgument String_comparison_exp
    , lehrplanquelle : OptionalArgument String_comparison_exp
    , lehrplantitel : OptionalArgument String_comparison_exp
    , link : OptionalArgument String_comparison_exp
    , materialart : OptionalArgument Ressourcenart_comparison_exp
    , materialbeschreibung : OptionalArgument String_comparison_exp
    , materialeintragsdatum : OptionalArgument Date_comparison_exp
    , materialtestdatum : OptionalArgument Date_comparison_exp
    , materialtitel : OptionalArgument String_comparison_exp
    , modul : OptionalArgument String_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    , upvotes : OptionalArgument Int_comparison_exp
    }


{-| Type alias for the `Lernplattform_bool_exp` attributes. Note that this type
needs to use the `Lernplattform_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Lernplattform_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Lernplattform_bool_exp))
    , not_ : OptionalArgument Lernplattform_bool_exp
    , or_ : OptionalArgument (List (Maybe Lernplattform_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , downvotes : OptionalArgument Int_comparison_exp
    , fach : OptionalArgument String_comparison_exp
    , klassenstufe : OptionalArgument Int_comparison_exp
    , lehrplanbeschreibung : OptionalArgument String_comparison_exp
    , lehrplaneintragsdatum : OptionalArgument Date_comparison_exp
    , lehrplanelternid : OptionalArgument Int_comparison_exp
    , lehrplanhierarchie : OptionalArgument String_comparison_exp
    , lehrplanquelle : OptionalArgument String_comparison_exp
    , lehrplantitel : OptionalArgument String_comparison_exp
    , link : OptionalArgument String_comparison_exp
    , materialart : OptionalArgument Ressourcenart_comparison_exp
    , materialbeschreibung : OptionalArgument String_comparison_exp
    , materialeintragsdatum : OptionalArgument Date_comparison_exp
    , materialtestdatum : OptionalArgument Date_comparison_exp
    , materialtitel : OptionalArgument String_comparison_exp
    , modul : OptionalArgument String_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    , upvotes : OptionalArgument Int_comparison_exp
    }


{-| Type for the Lernplattform\_bool\_exp input object.
-}
type Lernplattform_bool_exp
    = Lernplattform_bool_exp Lernplattform_bool_expRaw


{-| Encode a Lernplattform\_bool\_exp into a value that can be used as an argument.
-}
encodeLernplattform_bool_exp : Lernplattform_bool_exp -> Value
encodeLernplattform_bool_exp (Lernplattform_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeLernplattform_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeLernplattform_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeLernplattform_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "bundesland", encodeBundesland_comparison_exp |> Encode.optional input.bundesland ), ( "downvotes", encodeInt_comparison_exp |> Encode.optional input.downvotes ), ( "fach", encodeString_comparison_exp |> Encode.optional input.fach ), ( "klassenstufe", encodeInt_comparison_exp |> Encode.optional input.klassenstufe ), ( "lehrplanbeschreibung", encodeString_comparison_exp |> Encode.optional input.lehrplanbeschreibung ), ( "lehrplaneintragsdatum", encodeDate_comparison_exp |> Encode.optional input.lehrplaneintragsdatum ), ( "lehrplanelternid", encodeInt_comparison_exp |> Encode.optional input.lehrplanelternid ), ( "lehrplanhierarchie", encodeString_comparison_exp |> Encode.optional input.lehrplanhierarchie ), ( "lehrplanquelle", encodeString_comparison_exp |> Encode.optional input.lehrplanquelle ), ( "lehrplantitel", encodeString_comparison_exp |> Encode.optional input.lehrplantitel ), ( "link", encodeString_comparison_exp |> Encode.optional input.link ), ( "materialart", encodeRessourcenart_comparison_exp |> Encode.optional input.materialart ), ( "materialbeschreibung", encodeString_comparison_exp |> Encode.optional input.materialbeschreibung ), ( "materialeintragsdatum", encodeDate_comparison_exp |> Encode.optional input.materialeintragsdatum ), ( "materialtestdatum", encodeDate_comparison_exp |> Encode.optional input.materialtestdatum ), ( "materialtitel", encodeString_comparison_exp |> Encode.optional input.materialtitel ), ( "modul", encodeString_comparison_exp |> Encode.optional input.modul ), ( "schulart", encodeString_comparison_exp |> Encode.optional input.schulart ), ( "upvotes", encodeInt_comparison_exp |> Encode.optional input.upvotes ) ]


buildLernplattform_order_by :
    (Lernplattform_order_byOptionalFields -> Lernplattform_order_byOptionalFields)
    -> Lernplattform_order_by
buildLernplattform_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { bundesland = Absent, downvotes = Absent, fach = Absent, klassenstufe = Absent, lehrplanbeschreibung = Absent, lehrplaneintragsdatum = Absent, lehrplanelternid = Absent, lehrplanhierarchie = Absent, lehrplanquelle = Absent, lehrplantitel = Absent, link = Absent, materialart = Absent, materialbeschreibung = Absent, materialeintragsdatum = Absent, materialtestdatum = Absent, materialtitel = Absent, modul = Absent, schulart = Absent, upvotes = Absent }
    in
    { bundesland = optionals.bundesland, downvotes = optionals.downvotes, fach = optionals.fach, klassenstufe = optionals.klassenstufe, lehrplanbeschreibung = optionals.lehrplanbeschreibung, lehrplaneintragsdatum = optionals.lehrplaneintragsdatum, lehrplanelternid = optionals.lehrplanelternid, lehrplanhierarchie = optionals.lehrplanhierarchie, lehrplanquelle = optionals.lehrplanquelle, lehrplantitel = optionals.lehrplantitel, link = optionals.link, materialart = optionals.materialart, materialbeschreibung = optionals.materialbeschreibung, materialeintragsdatum = optionals.materialeintragsdatum, materialtestdatum = optionals.materialtestdatum, materialtitel = optionals.materialtitel, modul = optionals.modul, schulart = optionals.schulart, upvotes = optionals.upvotes }


type alias Lernplattform_order_byOptionalFields =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , downvotes : OptionalArgument Database.Enum.Order_by.Order_by
    , fach : OptionalArgument Database.Enum.Order_by.Order_by
    , klassenstufe : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplaneintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanelternid : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanhierarchie : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanquelle : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplantitel : OptionalArgument Database.Enum.Order_by.Order_by
    , link : OptionalArgument Database.Enum.Order_by.Order_by
    , materialart : OptionalArgument Database.Enum.Order_by.Order_by
    , materialbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , materialeintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtestdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtitel : OptionalArgument Database.Enum.Order_by.Order_by
    , modul : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    , upvotes : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Lernplattform\_order\_by input object.
-}
type alias Lernplattform_order_by =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , downvotes : OptionalArgument Database.Enum.Order_by.Order_by
    , fach : OptionalArgument Database.Enum.Order_by.Order_by
    , klassenstufe : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplaneintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanelternid : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanhierarchie : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplanquelle : OptionalArgument Database.Enum.Order_by.Order_by
    , lehrplantitel : OptionalArgument Database.Enum.Order_by.Order_by
    , link : OptionalArgument Database.Enum.Order_by.Order_by
    , materialart : OptionalArgument Database.Enum.Order_by.Order_by
    , materialbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , materialeintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtestdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtitel : OptionalArgument Database.Enum.Order_by.Order_by
    , modul : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    , upvotes : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Encode a Lernplattform\_order\_by into a value that can be used as an argument.
-}
encodeLernplattform_order_by : Lernplattform_order_by -> Value
encodeLernplattform_order_by input =
    Encode.maybeObject
        [ ( "bundesland", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.bundesland ), ( "downvotes", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.downvotes ), ( "fach", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.fach ), ( "klassenstufe", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.klassenstufe ), ( "lehrplanbeschreibung", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanbeschreibung ), ( "lehrplaneintragsdatum", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplaneintragsdatum ), ( "lehrplanelternid", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanelternid ), ( "lehrplanhierarchie", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanhierarchie ), ( "lehrplanquelle", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplanquelle ), ( "lehrplantitel", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.lehrplantitel ), ( "link", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.link ), ( "materialart", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialart ), ( "materialbeschreibung", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialbeschreibung ), ( "materialeintragsdatum", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialeintragsdatum ), ( "materialtestdatum", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialtestdatum ), ( "materialtitel", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialtitel ), ( "modul", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.modul ), ( "schulart", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.schulart ), ( "upvotes", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.upvotes ) ]


buildMaterial_bool_exp :
    (Material_bool_expOptionalFields -> Material_bool_expOptionalFields)
    -> Material_bool_exp
buildMaterial_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, downvotes = Absent, link = Absent, materialart = Absent, materialbeschreibung = Absent, materialeintragsdatum = Absent, materialtestdatum = Absent, materialtitel = Absent, materialzuordnungs = Absent, upvotes = Absent }
    in
    Material_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, downvotes = optionals.downvotes, link = optionals.link, materialart = optionals.materialart, materialbeschreibung = optionals.materialbeschreibung, materialeintragsdatum = optionals.materialeintragsdatum, materialtestdatum = optionals.materialtestdatum, materialtitel = optionals.materialtitel, materialzuordnungs = optionals.materialzuordnungs, upvotes = optionals.upvotes }


type alias Material_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Material_bool_exp))
    , not_ : OptionalArgument Material_bool_exp
    , or_ : OptionalArgument (List (Maybe Material_bool_exp))
    , downvotes : OptionalArgument Int_comparison_exp
    , link : OptionalArgument String_comparison_exp
    , materialart : OptionalArgument Ressourcenart_comparison_exp
    , materialbeschreibung : OptionalArgument String_comparison_exp
    , materialeintragsdatum : OptionalArgument Date_comparison_exp
    , materialtestdatum : OptionalArgument Date_comparison_exp
    , materialtitel : OptionalArgument String_comparison_exp
    , materialzuordnungs : OptionalArgument Materialzuordnung_bool_exp
    , upvotes : OptionalArgument Int_comparison_exp
    }


{-| Type alias for the `Material_bool_exp` attributes. Note that this type
needs to use the `Material_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Material_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Material_bool_exp))
    , not_ : OptionalArgument Material_bool_exp
    , or_ : OptionalArgument (List (Maybe Material_bool_exp))
    , downvotes : OptionalArgument Int_comparison_exp
    , link : OptionalArgument String_comparison_exp
    , materialart : OptionalArgument Ressourcenart_comparison_exp
    , materialbeschreibung : OptionalArgument String_comparison_exp
    , materialeintragsdatum : OptionalArgument Date_comparison_exp
    , materialtestdatum : OptionalArgument Date_comparison_exp
    , materialtitel : OptionalArgument String_comparison_exp
    , materialzuordnungs : OptionalArgument Materialzuordnung_bool_exp
    , upvotes : OptionalArgument Int_comparison_exp
    }


{-| Type for the Material\_bool\_exp input object.
-}
type Material_bool_exp
    = Material_bool_exp Material_bool_expRaw


{-| Encode a Material\_bool\_exp into a value that can be used as an argument.
-}
encodeMaterial_bool_exp : Material_bool_exp -> Value
encodeMaterial_bool_exp (Material_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeMaterial_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeMaterial_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeMaterial_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "downvotes", encodeInt_comparison_exp |> Encode.optional input.downvotes ), ( "link", encodeString_comparison_exp |> Encode.optional input.link ), ( "materialart", encodeRessourcenart_comparison_exp |> Encode.optional input.materialart ), ( "materialbeschreibung", encodeString_comparison_exp |> Encode.optional input.materialbeschreibung ), ( "materialeintragsdatum", encodeDate_comparison_exp |> Encode.optional input.materialeintragsdatum ), ( "materialtestdatum", encodeDate_comparison_exp |> Encode.optional input.materialtestdatum ), ( "materialtitel", encodeString_comparison_exp |> Encode.optional input.materialtitel ), ( "materialzuordnungs", encodeMaterialzuordnung_bool_exp |> Encode.optional input.materialzuordnungs ), ( "upvotes", encodeInt_comparison_exp |> Encode.optional input.upvotes ) ]


buildMaterial_order_by :
    (Material_order_byOptionalFields -> Material_order_byOptionalFields)
    -> Material_order_by
buildMaterial_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { downvotes = Absent, link = Absent, materialart = Absent, materialbeschreibung = Absent, materialeintragsdatum = Absent, materialtestdatum = Absent, materialtitel = Absent, upvotes = Absent }
    in
    { downvotes = optionals.downvotes, link = optionals.link, materialart = optionals.materialart, materialbeschreibung = optionals.materialbeschreibung, materialeintragsdatum = optionals.materialeintragsdatum, materialtestdatum = optionals.materialtestdatum, materialtitel = optionals.materialtitel, upvotes = optionals.upvotes }


type alias Material_order_byOptionalFields =
    { downvotes : OptionalArgument Database.Enum.Order_by.Order_by
    , link : OptionalArgument Database.Enum.Order_by.Order_by
    , materialart : OptionalArgument Database.Enum.Order_by.Order_by
    , materialbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , materialeintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtestdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtitel : OptionalArgument Database.Enum.Order_by.Order_by
    , upvotes : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Material\_order\_by input object.
-}
type alias Material_order_by =
    { downvotes : OptionalArgument Database.Enum.Order_by.Order_by
    , link : OptionalArgument Database.Enum.Order_by.Order_by
    , materialart : OptionalArgument Database.Enum.Order_by.Order_by
    , materialbeschreibung : OptionalArgument Database.Enum.Order_by.Order_by
    , materialeintragsdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtestdatum : OptionalArgument Database.Enum.Order_by.Order_by
    , materialtitel : OptionalArgument Database.Enum.Order_by.Order_by
    , upvotes : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Encode a Material\_order\_by into a value that can be used as an argument.
-}
encodeMaterial_order_by : Material_order_by -> Value
encodeMaterial_order_by input =
    Encode.maybeObject
        [ ( "downvotes", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.downvotes ), ( "link", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.link ), ( "materialart", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialart ), ( "materialbeschreibung", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialbeschreibung ), ( "materialeintragsdatum", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialeintragsdatum ), ( "materialtestdatum", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialtestdatum ), ( "materialtitel", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.materialtitel ), ( "upvotes", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.upvotes ) ]


buildMaterialzuordnung_bool_exp :
    (Materialzuordnung_bool_expOptionalFields -> Materialzuordnung_bool_expOptionalFields)
    -> Materialzuordnung_bool_exp
buildMaterialzuordnung_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, link = Absent, material = Absent, modul = Absent, module_ = Absent }
    in
    Materialzuordnung_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, link = optionals.link, material = optionals.material, modul = optionals.modul, module_ = optionals.module_ }


type alias Materialzuordnung_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Materialzuordnung_bool_exp))
    , not_ : OptionalArgument Materialzuordnung_bool_exp
    , or_ : OptionalArgument (List (Maybe Materialzuordnung_bool_exp))
    , link : OptionalArgument String_comparison_exp
    , material : OptionalArgument Material_bool_exp
    , modul : OptionalArgument String_comparison_exp
    , module_ : OptionalArgument Module_bool_exp
    }


{-| Type alias for the `Materialzuordnung_bool_exp` attributes. Note that this type
needs to use the `Materialzuordnung_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Materialzuordnung_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Materialzuordnung_bool_exp))
    , not_ : OptionalArgument Materialzuordnung_bool_exp
    , or_ : OptionalArgument (List (Maybe Materialzuordnung_bool_exp))
    , link : OptionalArgument String_comparison_exp
    , material : OptionalArgument Material_bool_exp
    , modul : OptionalArgument String_comparison_exp
    , module_ : OptionalArgument Module_bool_exp
    }


{-| Type for the Materialzuordnung\_bool\_exp input object.
-}
type Materialzuordnung_bool_exp
    = Materialzuordnung_bool_exp Materialzuordnung_bool_expRaw


{-| Encode a Materialzuordnung\_bool\_exp into a value that can be used as an argument.
-}
encodeMaterialzuordnung_bool_exp : Materialzuordnung_bool_exp -> Value
encodeMaterialzuordnung_bool_exp (Materialzuordnung_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeMaterialzuordnung_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeMaterialzuordnung_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeMaterialzuordnung_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "link", encodeString_comparison_exp |> Encode.optional input.link ), ( "material", encodeMaterial_bool_exp |> Encode.optional input.material ), ( "modul", encodeString_comparison_exp |> Encode.optional input.modul ), ( "module", encodeModule_bool_exp |> Encode.optional input.module_ ) ]


buildMaterialzuordnung_order_by :
    (Materialzuordnung_order_byOptionalFields -> Materialzuordnung_order_byOptionalFields)
    -> Materialzuordnung_order_by
buildMaterialzuordnung_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { link = Absent, material = Absent, modul = Absent, module_ = Absent }
    in
    { link = optionals.link, material = optionals.material, modul = optionals.modul, module_ = optionals.module_ }


type alias Materialzuordnung_order_byOptionalFields =
    { link : OptionalArgument Database.Enum.Order_by.Order_by
    , material : OptionalArgument Material_order_by
    , modul : OptionalArgument Database.Enum.Order_by.Order_by
    , module_ : OptionalArgument Module_order_by
    }


{-| Type for the Materialzuordnung\_order\_by input object.
-}
type alias Materialzuordnung_order_by =
    { link : OptionalArgument Database.Enum.Order_by.Order_by
    , material : OptionalArgument Material_order_by
    , modul : OptionalArgument Database.Enum.Order_by.Order_by
    , module_ : OptionalArgument Module_order_by
    }


{-| Encode a Materialzuordnung\_order\_by into a value that can be used as an argument.
-}
encodeMaterialzuordnung_order_by : Materialzuordnung_order_by -> Value
encodeMaterialzuordnung_order_by input =
    Encode.maybeObject
        [ ( "link", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.link ), ( "material", encodeMaterial_order_by |> Encode.optional input.material ), ( "modul", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.modul ), ( "module", encodeModule_order_by |> Encode.optional input.module_ ) ]


buildModule_bool_exp :
    (Module_bool_expOptionalFields -> Module_bool_expOptionalFields)
    -> Module_bool_exp
buildModule_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, lehrplanzuordnungs = Absent, materialzuordnungs = Absent, modul = Absent, modulhierarchies = Absent }
    in
    Module_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, lehrplanzuordnungs = optionals.lehrplanzuordnungs, materialzuordnungs = optionals.materialzuordnungs, modul = optionals.modul, modulhierarchies = optionals.modulhierarchies }


type alias Module_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Module_bool_exp))
    , not_ : OptionalArgument Module_bool_exp
    , or_ : OptionalArgument (List (Maybe Module_bool_exp))
    , lehrplanzuordnungs : OptionalArgument Lehrplanzuordnung_bool_exp
    , materialzuordnungs : OptionalArgument Materialzuordnung_bool_exp
    , modul : OptionalArgument String_comparison_exp
    , modulhierarchies : OptionalArgument Modulhierarchie_bool_exp
    }


{-| Type alias for the `Module_bool_exp` attributes. Note that this type
needs to use the `Module_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Module_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Module_bool_exp))
    , not_ : OptionalArgument Module_bool_exp
    , or_ : OptionalArgument (List (Maybe Module_bool_exp))
    , lehrplanzuordnungs : OptionalArgument Lehrplanzuordnung_bool_exp
    , materialzuordnungs : OptionalArgument Materialzuordnung_bool_exp
    , modul : OptionalArgument String_comparison_exp
    , modulhierarchies : OptionalArgument Modulhierarchie_bool_exp
    }


{-| Type for the Module\_bool\_exp input object.
-}
type Module_bool_exp
    = Module_bool_exp Module_bool_expRaw


{-| Encode a Module\_bool\_exp into a value that can be used as an argument.
-}
encodeModule_bool_exp : Module_bool_exp -> Value
encodeModule_bool_exp (Module_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeModule_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeModule_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeModule_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "lehrplanzuordnungs", encodeLehrplanzuordnung_bool_exp |> Encode.optional input.lehrplanzuordnungs ), ( "materialzuordnungs", encodeMaterialzuordnung_bool_exp |> Encode.optional input.materialzuordnungs ), ( "modul", encodeString_comparison_exp |> Encode.optional input.modul ), ( "modulhierarchies", encodeModulhierarchie_bool_exp |> Encode.optional input.modulhierarchies ) ]


buildModule_order_by :
    (Module_order_byOptionalFields -> Module_order_byOptionalFields)
    -> Module_order_by
buildModule_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { modul = Absent }
    in
    { modul = optionals.modul }


type alias Module_order_byOptionalFields =
    { modul : OptionalArgument Database.Enum.Order_by.Order_by }


{-| Type for the Module\_order\_by input object.
-}
type alias Module_order_by =
    { modul : OptionalArgument Database.Enum.Order_by.Order_by }


{-| Encode a Module\_order\_by into a value that can be used as an argument.
-}
encodeModule_order_by : Module_order_by -> Value
encodeModule_order_by input =
    Encode.maybeObject
        [ ( "modul", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.modul ) ]


buildModulhierarchie_bool_exp :
    (Modulhierarchie_bool_expOptionalFields -> Modulhierarchie_bool_expOptionalFields)
    -> Modulhierarchie_bool_exp
buildModulhierarchie_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, module_ = Absent, untermodul = Absent }
    in
    Modulhierarchie_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, module_ = optionals.module_, untermodul = optionals.untermodul }


type alias Modulhierarchie_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Modulhierarchie_bool_exp))
    , not_ : OptionalArgument Modulhierarchie_bool_exp
    , or_ : OptionalArgument (List (Maybe Modulhierarchie_bool_exp))
    , module_ : OptionalArgument Module_bool_exp
    , untermodul : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Modulhierarchie_bool_exp` attributes. Note that this type
needs to use the `Modulhierarchie_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Modulhierarchie_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Modulhierarchie_bool_exp))
    , not_ : OptionalArgument Modulhierarchie_bool_exp
    , or_ : OptionalArgument (List (Maybe Modulhierarchie_bool_exp))
    , module_ : OptionalArgument Module_bool_exp
    , untermodul : OptionalArgument String_comparison_exp
    }


{-| Type for the Modulhierarchie\_bool\_exp input object.
-}
type Modulhierarchie_bool_exp
    = Modulhierarchie_bool_exp Modulhierarchie_bool_expRaw


{-| Encode a Modulhierarchie\_bool\_exp into a value that can be used as an argument.
-}
encodeModulhierarchie_bool_exp : Modulhierarchie_bool_exp -> Value
encodeModulhierarchie_bool_exp (Modulhierarchie_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeModulhierarchie_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeModulhierarchie_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeModulhierarchie_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "module", encodeModule_bool_exp |> Encode.optional input.module_ ), ( "untermodul", encodeString_comparison_exp |> Encode.optional input.untermodul ) ]


buildModulhierarchie_order_by :
    (Modulhierarchie_order_byOptionalFields -> Modulhierarchie_order_byOptionalFields)
    -> Modulhierarchie_order_by
buildModulhierarchie_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { module_ = Absent, untermodul = Absent }
    in
    { module_ = optionals.module_, untermodul = optionals.untermodul }


type alias Modulhierarchie_order_byOptionalFields =
    { module_ : OptionalArgument Module_order_by
    , untermodul : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Modulhierarchie\_order\_by input object.
-}
type alias Modulhierarchie_order_by =
    { module_ : OptionalArgument Module_order_by
    , untermodul : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Encode a Modulhierarchie\_order\_by into a value that can be used as an argument.
-}
encodeModulhierarchie_order_by : Modulhierarchie_order_by -> Value
encodeModulhierarchie_order_by input =
    Encode.maybeObject
        [ ( "module", encodeModule_order_by |> Encode.optional input.module_ ), ( "untermodul", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.untermodul ) ]


buildRessourcenart_comparison_exp :
    (Ressourcenart_comparison_expOptionalFields -> Ressourcenart_comparison_expOptionalFields)
    -> Ressourcenart_comparison_exp
buildRessourcenart_comparison_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals.eq_, gt_ = optionals.gt_, gte_ = optionals.gte_, in_ = optionals.in_, is_null_ = optionals.is_null_, lt_ = optionals.lt_, lte_ = optionals.lte_, neq_ = optionals.neq_, nin_ = optionals.nin_ }


type alias Ressourcenart_comparison_expOptionalFields =
    { eq_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , gt_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , gte_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , in_ : OptionalArgument (List Database.ScalarCodecs.Ressourcenart)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , lte_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , neq_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , nin_ : OptionalArgument (List Database.ScalarCodecs.Ressourcenart)
    }


{-| Type for the Ressourcenart\_comparison\_exp input object.
-}
type alias Ressourcenart_comparison_exp =
    { eq_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , gt_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , gte_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , in_ : OptionalArgument (List Database.ScalarCodecs.Ressourcenart)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , lte_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , neq_ : OptionalArgument Database.ScalarCodecs.Ressourcenart
    , nin_ : OptionalArgument (List Database.ScalarCodecs.Ressourcenart)
    }


{-| Encode a Ressourcenart\_comparison\_exp into a value that can be used as an argument.
-}
encodeRessourcenart_comparison_exp : Ressourcenart_comparison_exp -> Value
encodeRessourcenart_comparison_exp input =
    Encode.maybeObject
        [ ( "_eq", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.optional input.eq_ ), ( "_gt", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.optional input.gt_ ), ( "_gte", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.optional input.gte_ ), ( "_in", ((Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.list) |> Encode.optional input.in_ ), ( "_is_null", Encode.bool |> Encode.optional input.is_null_ ), ( "_lt", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.optional input.lt_ ), ( "_lte", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.optional input.lte_ ), ( "_neq", (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.optional input.neq_ ), ( "_nin", ((Database.ScalarCodecs.codecs |> Database.Scalar.unwrapEncoder .codecRessourcenart) |> Encode.list) |> Encode.optional input.nin_ ) ]


buildSchulart_bool_exp :
    (Schulart_bool_expOptionalFields -> Schulart_bool_expOptionalFields)
    -> Schulart_bool_exp
buildSchulart_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, bundesland = Absent, schulart = Absent }
    in
    Schulart_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, bundesland = optionals.bundesland, schulart = optionals.schulart }


type alias Schulart_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Schulart_bool_exp))
    , not_ : OptionalArgument Schulart_bool_exp
    , or_ : OptionalArgument (List (Maybe Schulart_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Schulart_bool_exp` attributes. Note that this type
needs to use the `Schulart_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Schulart_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Schulart_bool_exp))
    , not_ : OptionalArgument Schulart_bool_exp
    , or_ : OptionalArgument (List (Maybe Schulart_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    }


{-| Type for the Schulart\_bool\_exp input object.
-}
type Schulart_bool_exp
    = Schulart_bool_exp Schulart_bool_expRaw


{-| Encode a Schulart\_bool\_exp into a value that can be used as an argument.
-}
encodeSchulart_bool_exp : Schulart_bool_exp -> Value
encodeSchulart_bool_exp (Schulart_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeSchulart_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeSchulart_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeSchulart_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "bundesland", encodeBundesland_comparison_exp |> Encode.optional input.bundesland ), ( "schulart", encodeString_comparison_exp |> Encode.optional input.schulart ) ]


buildSchulart_order_by :
    (Schulart_order_byOptionalFields -> Schulart_order_byOptionalFields)
    -> Schulart_order_by
buildSchulart_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { bundesland = Absent, schulart = Absent }
    in
    { bundesland = optionals.bundesland, schulart = optionals.schulart }


type alias Schulart_order_byOptionalFields =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Schulart\_order\_by input object.
-}
type alias Schulart_order_by =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Encode a Schulart\_order\_by into a value that can be used as an argument.
-}
encodeSchulart_order_by : Schulart_order_by -> Value
encodeSchulart_order_by input =
    Encode.maybeObject
        [ ( "bundesland", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.bundesland ), ( "schulart", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.schulart ) ]


buildSchulartenbedeutung_bool_exp :
    (Schulartenbedeutung_bool_expOptionalFields -> Schulartenbedeutung_bool_expOptionalFields)
    -> Schulartenbedeutung_bool_exp
buildSchulartenbedeutung_bool_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { and_ = Absent, not_ = Absent, or_ = Absent, bundesland = Absent, schulart = Absent, schulart_intern = Absent }
    in
    Schulartenbedeutung_bool_exp { and_ = optionals.and_, not_ = optionals.not_, or_ = optionals.or_, bundesland = optionals.bundesland, schulart = optionals.schulart, schulart_intern = optionals.schulart_intern }


type alias Schulartenbedeutung_bool_expOptionalFields =
    { and_ : OptionalArgument (List (Maybe Schulartenbedeutung_bool_exp))
    , not_ : OptionalArgument Schulartenbedeutung_bool_exp
    , or_ : OptionalArgument (List (Maybe Schulartenbedeutung_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    , schulart_intern : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Schulartenbedeutung_bool_exp` attributes. Note that this type
needs to use the `Schulartenbedeutung_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Schulartenbedeutung_bool_expRaw =
    { and_ : OptionalArgument (List (Maybe Schulartenbedeutung_bool_exp))
    , not_ : OptionalArgument Schulartenbedeutung_bool_exp
    , or_ : OptionalArgument (List (Maybe Schulartenbedeutung_bool_exp))
    , bundesland : OptionalArgument Bundesland_comparison_exp
    , schulart : OptionalArgument String_comparison_exp
    , schulart_intern : OptionalArgument String_comparison_exp
    }


{-| Type for the Schulartenbedeutung\_bool\_exp input object.
-}
type Schulartenbedeutung_bool_exp
    = Schulartenbedeutung_bool_exp Schulartenbedeutung_bool_expRaw


{-| Encode a Schulartenbedeutung\_bool\_exp into a value that can be used as an argument.
-}
encodeSchulartenbedeutung_bool_exp : Schulartenbedeutung_bool_exp -> Value
encodeSchulartenbedeutung_bool_exp (Schulartenbedeutung_bool_exp input) =
    Encode.maybeObject
        [ ( "_and", (encodeSchulartenbedeutung_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.and_ ), ( "_not", encodeSchulartenbedeutung_bool_exp |> Encode.optional input.not_ ), ( "_or", (encodeSchulartenbedeutung_bool_exp |> Encode.maybe |> Encode.list) |> Encode.optional input.or_ ), ( "bundesland", encodeBundesland_comparison_exp |> Encode.optional input.bundesland ), ( "schulart", encodeString_comparison_exp |> Encode.optional input.schulart ), ( "schulart_intern", encodeString_comparison_exp |> Encode.optional input.schulart_intern ) ]


buildSchulartenbedeutung_order_by :
    (Schulartenbedeutung_order_byOptionalFields -> Schulartenbedeutung_order_byOptionalFields)
    -> Schulartenbedeutung_order_by
buildSchulartenbedeutung_order_by fillOptionals =
    let
        optionals =
            fillOptionals
                { bundesland = Absent, schulart = Absent, schulart_intern = Absent }
    in
    { bundesland = optionals.bundesland, schulart = optionals.schulart, schulart_intern = optionals.schulart_intern }


type alias Schulartenbedeutung_order_byOptionalFields =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart_intern : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Type for the Schulartenbedeutung\_order\_by input object.
-}
type alias Schulartenbedeutung_order_by =
    { bundesland : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart : OptionalArgument Database.Enum.Order_by.Order_by
    , schulart_intern : OptionalArgument Database.Enum.Order_by.Order_by
    }


{-| Encode a Schulartenbedeutung\_order\_by into a value that can be used as an argument.
-}
encodeSchulartenbedeutung_order_by : Schulartenbedeutung_order_by -> Value
encodeSchulartenbedeutung_order_by input =
    Encode.maybeObject
        [ ( "bundesland", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.bundesland ), ( "schulart", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.schulart ), ( "schulart_intern", Encode.enum Database.Enum.Order_by.toString |> Encode.optional input.schulart_intern ) ]


buildString_comparison_exp :
    (String_comparison_expOptionalFields -> String_comparison_expOptionalFields)
    -> String_comparison_exp
buildString_comparison_exp fillOptionals =
    let
        optionals =
            fillOptionals
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, ilike_ = Absent, in_ = Absent, is_null_ = Absent, like_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nilike_ = Absent, nin_ = Absent, nlike_ = Absent, nsimilar_ = Absent, similar_ = Absent }
    in
    { eq_ = optionals.eq_, gt_ = optionals.gt_, gte_ = optionals.gte_, ilike_ = optionals.ilike_, in_ = optionals.in_, is_null_ = optionals.is_null_, like_ = optionals.like_, lt_ = optionals.lt_, lte_ = optionals.lte_, neq_ = optionals.neq_, nilike_ = optionals.nilike_, nin_ = optionals.nin_, nlike_ = optionals.nlike_, nsimilar_ = optionals.nsimilar_, similar_ = optionals.similar_ }


type alias String_comparison_expOptionalFields =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , nlike_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Type for the String\_comparison\_exp input object.
-}
type alias String_comparison_exp =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , nlike_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Encode a String\_comparison\_exp into a value that can be used as an argument.
-}
encodeString_comparison_exp : String_comparison_exp -> Value
encodeString_comparison_exp input =
    Encode.maybeObject
        [ ( "_eq", Encode.string |> Encode.optional input.eq_ ), ( "_gt", Encode.string |> Encode.optional input.gt_ ), ( "_gte", Encode.string |> Encode.optional input.gte_ ), ( "_ilike", Encode.string |> Encode.optional input.ilike_ ), ( "_in", (Encode.string |> Encode.list) |> Encode.optional input.in_ ), ( "_is_null", Encode.bool |> Encode.optional input.is_null_ ), ( "_like", Encode.string |> Encode.optional input.like_ ), ( "_lt", Encode.string |> Encode.optional input.lt_ ), ( "_lte", Encode.string |> Encode.optional input.lte_ ), ( "_neq", Encode.string |> Encode.optional input.neq_ ), ( "_nilike", Encode.string |> Encode.optional input.nilike_ ), ( "_nin", (Encode.string |> Encode.list) |> Encode.optional input.nin_ ), ( "_nlike", Encode.string |> Encode.optional input.nlike_ ), ( "_nsimilar", Encode.string |> Encode.optional input.nsimilar_ ), ( "_similar", Encode.string |> Encode.optional input.similar_ ) ]
