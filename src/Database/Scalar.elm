-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Database.Scalar exposing (Bundesland(..), Codecs, Date(..), Id(..), Ressourcenart(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Bundesland
    = Bundesland String


type Date
    = Date String


type Id
    = Id String


type Ressourcenart
    = Ressourcenart String


defineCodecs :
    { codecBundesland : Codec valueBundesland
    , codecDate : Codec valueDate
    , codecId : Codec valueId
    , codecRessourcenart : Codec valueRessourcenart
    }
    -> Codecs valueBundesland valueDate valueId valueRessourcenart
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueBundesland valueDate valueId valueRessourcenart
    ->
        { codecBundesland : Codec valueBundesland
        , codecDate : Codec valueDate
        , codecId : Codec valueId
        , codecRessourcenart : Codec valueRessourcenart
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueBundesland valueDate valueId valueRessourcenart
    = Codecs (RawCodecs valueBundesland valueDate valueId valueRessourcenart)


type alias RawCodecs valueBundesland valueDate valueId valueRessourcenart =
    { codecBundesland : Codec valueBundesland
    , codecDate : Codec valueDate
    , codecId : Codec valueId
    , codecRessourcenart : Codec valueRessourcenart
    }


defaultCodecs : RawCodecs Bundesland Date Id Ressourcenart
defaultCodecs =
    { codecBundesland =
        { encoder = \(Bundesland raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Bundesland
        }
    , codecDate =
        { encoder = \(Date raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Date
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecRessourcenart =
        { encoder = \(Ressourcenart raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Ressourcenart
        }
    }
