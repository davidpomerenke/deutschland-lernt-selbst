-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Database.Object.Lehrplandetails exposing (..)

import Database.Enum.Lehrplan_intern_select_column
import Database.Enum.Lehrplandetails_select_column
import Database.Enum.Lehrplanzuordnung_select_column
import Database.InputObject
import Database.Interface
import Database.Object
import Database.Scalar
import Database.ScalarCodecs
import Database.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias LehrplanInternsOptionalArguments =
    { distinct_on : OptionalArgument (List Database.Enum.Lehrplan_intern_select_column.Lehrplan_intern_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Database.InputObject.Lehrplan_intern_order_by)
    , where_ : OptionalArgument Database.InputObject.Lehrplan_intern_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
lehrplan_interns :
    (LehrplanInternsOptionalArguments -> LehrplanInternsOptionalArguments)
    -> SelectionSet decodesTo Database.Object.Lehrplan_intern
    -> SelectionSet (List decodesTo) Database.Object.Lehrplandetails
lehrplan_interns fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Database.Enum.Lehrplan_intern_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Database.InputObject.encodeLehrplan_intern_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Database.InputObject.encodeLehrplan_intern_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "lehrplan_interns" optionalArgs object_ (identity >> Decode.list)


lehrplanbeschreibung : SelectionSet (Maybe String) Database.Object.Lehrplandetails
lehrplanbeschreibung =
    Object.selectionForField "(Maybe String)" "lehrplanbeschreibung" [] (Decode.string |> Decode.nullable)


{-| An object relationship
-}
lehrplandetail :
    SelectionSet decodesTo Database.Object.Lehrplandetails
    -> SelectionSet (Maybe decodesTo) Database.Object.Lehrplandetails
lehrplandetail object_ =
    Object.selectionForCompositeField "lehrplandetail" [] object_ (identity >> Decode.nullable)


type alias LehrplandetailsOptionalArguments =
    { distinct_on : OptionalArgument (List Database.Enum.Lehrplandetails_select_column.Lehrplandetails_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Database.InputObject.Lehrplandetails_order_by)
    , where_ : OptionalArgument Database.InputObject.Lehrplandetails_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
lehrplandetails :
    (LehrplandetailsOptionalArguments -> LehrplandetailsOptionalArguments)
    -> SelectionSet decodesTo Database.Object.Lehrplandetails
    -> SelectionSet (List decodesTo) Database.Object.Lehrplandetails
lehrplandetails fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Database.Enum.Lehrplandetails_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Database.InputObject.encodeLehrplandetails_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Database.InputObject.encodeLehrplandetails_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "lehrplandetails" optionalArgs object_ (identity >> Decode.list)


lehrplaneintragsdatum : SelectionSet Database.ScalarCodecs.Date Database.Object.Lehrplandetails
lehrplaneintragsdatum =
    Object.selectionForField "ScalarCodecs.Date" "lehrplaneintragsdatum" [] (Database.ScalarCodecs.codecs |> Database.Scalar.unwrapCodecs |> .codecDate |> .decoder)


lehrplanelternid : SelectionSet (Maybe Int) Database.Object.Lehrplandetails
lehrplanelternid =
    Object.selectionForField "(Maybe Int)" "lehrplanelternid" [] (Decode.int |> Decode.nullable)


lehrplanhierarchie : SelectionSet (Maybe String) Database.Object.Lehrplandetails
lehrplanhierarchie =
    Object.selectionForField "(Maybe String)" "lehrplanhierarchie" [] (Decode.string |> Decode.nullable)


lehrplanid : SelectionSet Int Database.Object.Lehrplandetails
lehrplanid =
    Object.selectionForField "Int" "lehrplanid" [] Decode.int


lehrplanquelle : SelectionSet String Database.Object.Lehrplandetails
lehrplanquelle =
    Object.selectionForField "String" "lehrplanquelle" [] Decode.string


lehrplantitel : SelectionSet (Maybe String) Database.Object.Lehrplandetails
lehrplantitel =
    Object.selectionForField "(Maybe String)" "lehrplantitel" [] (Decode.string |> Decode.nullable)


type alias LehrplanzuordnungsOptionalArguments =
    { distinct_on : OptionalArgument (List Database.Enum.Lehrplanzuordnung_select_column.Lehrplanzuordnung_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Database.InputObject.Lehrplanzuordnung_order_by)
    , where_ : OptionalArgument Database.InputObject.Lehrplanzuordnung_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
lehrplanzuordnungs :
    (LehrplanzuordnungsOptionalArguments -> LehrplanzuordnungsOptionalArguments)
    -> SelectionSet decodesTo Database.Object.Lehrplanzuordnung
    -> SelectionSet (List decodesTo) Database.Object.Lehrplandetails
lehrplanzuordnungs fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Database.Enum.Lehrplanzuordnung_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Database.InputObject.encodeLehrplanzuordnung_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Database.InputObject.encodeLehrplanzuordnung_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "lehrplanzuordnungs" optionalArgs object_ (identity >> Decode.list)
