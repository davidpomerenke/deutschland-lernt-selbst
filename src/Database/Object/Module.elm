-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Database.Object.Module exposing (..)

import Database.Enum.Lehrplanzuordnung_select_column
import Database.Enum.Materialzuordnung_select_column
import Database.Enum.Modulhierarchie_select_column
import Database.InputObject
import Database.Interface
import Database.Object
import Database.Scalar
import Database.ScalarCodecs
import Database.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias LehrplanzuordnungsOptionalArguments =
    { distinct_on : OptionalArgument (List Database.Enum.Lehrplanzuordnung_select_column.Lehrplanzuordnung_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Database.InputObject.Lehrplanzuordnung_order_by)
    , where_ : OptionalArgument Database.InputObject.Lehrplanzuordnung_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
lehrplanzuordnungs :
    (LehrplanzuordnungsOptionalArguments -> LehrplanzuordnungsOptionalArguments)
    -> SelectionSet decodesTo Database.Object.Lehrplanzuordnung
    -> SelectionSet (List decodesTo) Database.Object.Module
lehrplanzuordnungs fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Database.Enum.Lehrplanzuordnung_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Database.InputObject.encodeLehrplanzuordnung_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Database.InputObject.encodeLehrplanzuordnung_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "lehrplanzuordnungs" optionalArgs object_ (identity >> Decode.list)


type alias MaterialzuordnungsOptionalArguments =
    { distinct_on : OptionalArgument (List Database.Enum.Materialzuordnung_select_column.Materialzuordnung_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Database.InputObject.Materialzuordnung_order_by)
    , where_ : OptionalArgument Database.InputObject.Materialzuordnung_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
materialzuordnungs :
    (MaterialzuordnungsOptionalArguments -> MaterialzuordnungsOptionalArguments)
    -> SelectionSet decodesTo Database.Object.Materialzuordnung
    -> SelectionSet (List decodesTo) Database.Object.Module
materialzuordnungs fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Database.Enum.Materialzuordnung_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Database.InputObject.encodeMaterialzuordnung_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Database.InputObject.encodeMaterialzuordnung_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "materialzuordnungs" optionalArgs object_ (identity >> Decode.list)


modul : SelectionSet String Database.Object.Module
modul =
    Object.selectionForField "String" "modul" [] Decode.string


type alias ModulhierarchiesOptionalArguments =
    { distinct_on : OptionalArgument (List Database.Enum.Modulhierarchie_select_column.Modulhierarchie_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Database.InputObject.Modulhierarchie_order_by)
    , where_ : OptionalArgument Database.InputObject.Modulhierarchie_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
modulhierarchies :
    (ModulhierarchiesOptionalArguments -> ModulhierarchiesOptionalArguments)
    -> SelectionSet decodesTo Database.Object.Modulhierarchie
    -> SelectionSet (List decodesTo) Database.Object.Module
modulhierarchies fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Database.Enum.Modulhierarchie_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Database.InputObject.encodeModulhierarchie_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Database.InputObject.encodeModulhierarchie_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "modulhierarchies" optionalArgs object_ (identity >> Decode.list)
