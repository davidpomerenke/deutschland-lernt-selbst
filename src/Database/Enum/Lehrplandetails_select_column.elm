-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Database.Enum.Lehrplandetails_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "lehrplandetails"

  - Lehrplanbeschreibung - column name
  - Lehrplaneintragsdatum - column name
  - Lehrplanelternid - column name
  - Lehrplanhierarchie - column name
  - Lehrplanid - column name
  - Lehrplanquelle - column name
  - Lehrplantitel - column name

-}
type Lehrplandetails_select_column
    = Lehrplanbeschreibung
    | Lehrplaneintragsdatum
    | Lehrplanelternid
    | Lehrplanhierarchie
    | Lehrplanid
    | Lehrplanquelle
    | Lehrplantitel


list : List Lehrplandetails_select_column
list =
    [ Lehrplanbeschreibung, Lehrplaneintragsdatum, Lehrplanelternid, Lehrplanhierarchie, Lehrplanid, Lehrplanquelle, Lehrplantitel ]


decoder : Decoder Lehrplandetails_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "lehrplanbeschreibung" ->
                        Decode.succeed Lehrplanbeschreibung

                    "lehrplaneintragsdatum" ->
                        Decode.succeed Lehrplaneintragsdatum

                    "lehrplanelternid" ->
                        Decode.succeed Lehrplanelternid

                    "lehrplanhierarchie" ->
                        Decode.succeed Lehrplanhierarchie

                    "lehrplanid" ->
                        Decode.succeed Lehrplanid

                    "lehrplanquelle" ->
                        Decode.succeed Lehrplanquelle

                    "lehrplantitel" ->
                        Decode.succeed Lehrplantitel

                    _ ->
                        Decode.fail ("Invalid Lehrplandetails_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Lehrplandetails_select_column -> String
toString enum =
    case enum of
        Lehrplanbeschreibung ->
            "lehrplanbeschreibung"

        Lehrplaneintragsdatum ->
            "lehrplaneintragsdatum"

        Lehrplanelternid ->
            "lehrplanelternid"

        Lehrplanhierarchie ->
            "lehrplanhierarchie"

        Lehrplanid ->
            "lehrplanid"

        Lehrplanquelle ->
            "lehrplanquelle"

        Lehrplantitel ->
            "lehrplantitel"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Lehrplandetails_select_column
fromString enumString =
    case enumString of
        "lehrplanbeschreibung" ->
            Just Lehrplanbeschreibung

        "lehrplaneintragsdatum" ->
            Just Lehrplaneintragsdatum

        "lehrplanelternid" ->
            Just Lehrplanelternid

        "lehrplanhierarchie" ->
            Just Lehrplanhierarchie

        "lehrplanid" ->
            Just Lehrplanid

        "lehrplanquelle" ->
            Just Lehrplanquelle

        "lehrplantitel" ->
            Just Lehrplantitel

        _ ->
            Nothing
