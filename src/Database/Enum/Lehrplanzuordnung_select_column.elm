-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Database.Enum.Lehrplanzuordnung_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "lehrplanzuordnung"

  - Lehrplanid - column name
  - Modul - column name

-}
type Lehrplanzuordnung_select_column
    = Lehrplanid
    | Modul


list : List Lehrplanzuordnung_select_column
list =
    [ Lehrplanid, Modul ]


decoder : Decoder Lehrplanzuordnung_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "lehrplanid" ->
                        Decode.succeed Lehrplanid

                    "modul" ->
                        Decode.succeed Modul

                    _ ->
                        Decode.fail ("Invalid Lehrplanzuordnung_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Lehrplanzuordnung_select_column -> String
toString enum =
    case enum of
        Lehrplanid ->
            "lehrplanid"

        Modul ->
            "modul"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Lehrplanzuordnung_select_column
fromString enumString =
    case enumString of
        "lehrplanid" ->
            Just Lehrplanid

        "modul" ->
            Just Modul

        _ ->
            Nothing
