-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Database.Enum.Modulhierarchie_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "modulhierarchie"

  - Untermodul - column name

-}
type Modulhierarchie_select_column
    = Untermodul


list : List Modulhierarchie_select_column
list =
    [ Untermodul ]


decoder : Decoder Modulhierarchie_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "untermodul" ->
                        Decode.succeed Untermodul

                    _ ->
                        Decode.fail ("Invalid Modulhierarchie_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Modulhierarchie_select_column -> String
toString enum =
    case enum of
        Untermodul ->
            "untermodul"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Modulhierarchie_select_column
fromString enumString =
    case enumString of
        "untermodul" ->
            Just Untermodul

        _ ->
            Nothing
